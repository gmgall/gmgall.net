<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>challenges on gmgall.net</title>
    <link>https://gmgall.net/tags/challenges/</link>
    <description>Recent content in challenges on gmgall.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 11 Mar 2009 00:00:00 -0300</lastBuildDate><atom:link href="https://gmgall.net/tags/challenges/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sequência Look and Say em Python</title>
      <link>https://gmgall.net/blog/sequencia-look-and-say-em-python/</link>
      <pubDate>Wed, 11 Mar 2009 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/sequencia-look-and-say-em-python/</guid>
      <description>&lt;p&gt;Tenho brincado ultimamente com os desafios do &lt;a href=&#34;http://www.pythonchallenge.com/&#34;&gt;Python Challenge&lt;/a&gt;. São bem interessantes para quem quer aprender Python na prática. Estou resolvendo o nível 11 e já precisei &lt;a href=&#34;https://web.archive.org/web/20090309064253/http://www.pythonware.com/products/pil/&#34;&gt;processar imagens&lt;/a&gt;, descompactar dados comprimidos com &lt;a href=&#34;https://docs.python.org/3/library/zipfile.html&#34;&gt;zip&lt;/a&gt; e &lt;a href=&#34;https://docs.python.org/3/library/bz2.html&#34;&gt;bz2&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/3/library/pickle.html&#34;&gt;serializar objetos&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/3/library/urllib.html&#34;&gt;acessar recursos via URL&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/3/library/re.html&#34;&gt;usar expressões regulares&lt;/a&gt; e algumas tarefas que não exigiam necessariamente um módulo.&lt;/p&gt;
&lt;p&gt;O último nível que resolvi tinha como resposta o &lt;a href=&#34;https://web.archive.org/web/20111111070626/http://oeis.org/A005341&#34;&gt;comprimento de um elemento específico&lt;/a&gt; de uma &lt;a href=&#34;https://web.archive.org/web/20090303175131/http://www.research.att.com/~njas/sequences/&#34;&gt;sequência de inteiros&lt;/a&gt; conhecida como &lt;a href=&#34;https://web.archive.org/web/20090304154846/http://www.research.att.com/~njas/sequences/A005150&#34;&gt;&lt;em&gt;look and say&lt;/em&gt;&lt;/a&gt; (olhe e descreva). Achei diversas implementações da geração da sequência pela web, nenhuma delas me pareceu &lt;em&gt;pythonica&lt;/em&gt; ou legível o suficiente. Resolvi juntar algumas das idéias que vi nessas implementações com os conhecimentos que obtive recentemente com a leitura de um material sobre &lt;a href=&#34;https://docs.python.org/dev/howto/functional.html&#34;&gt;programação funcional em Python&lt;/a&gt; e criei uma função que retorna uma lista com os elementos da sequência. A minha solução não é a mais eficiente possível (&lt;a href=&#34;http://www.fantascienza.net/leonardo/so/briciole_python1/&#34;&gt;essa página&lt;/a&gt; contém uma implementação alegadamente otimizada para velocidade), mas acho que é elegante e mostra alguns aspectos interessantes da linguagem. Segue o código:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;look_and_say&lt;/span&gt;(first, elements):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; groupby
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    seq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [str(first)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say&lt;/span&gt;(number):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,g &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; groupby(number):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append( str(len(list(g))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(elements):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        seq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(say(seq[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; seq
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O argumento &lt;code&gt;first&lt;/code&gt; de &lt;code&gt;look_and_say&lt;/code&gt; recebe o primeiro elemento da lista e &lt;code&gt;elements&lt;/code&gt; quantos elementos depois do primeiro devem ser gerados. Exemplo de uso:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; look_and_say(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1211&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;111221&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;312211&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13112221&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1113213211&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;31131211131221&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13211311123113112211&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11131221133112132113212221&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; look_and_say(&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;55&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;25&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1215&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11121115&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;31123115&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dentre os aspectos que gostaria de destacar estão a possibilidade de importar partes de módulos e definir funções dentro de funções, o uso de listas para &lt;a href=&#34;https://web.archive.org/web/20090324052548/http://codare.net/2006/09/17/python-concatenacao-eficiente-de-strings/&#34;&gt;concatenar strings com eficiência&lt;/a&gt; e o uso de &lt;a href=&#34;https://docs.python.org/dev/howto/functional.html#grouping-elements&#34;&gt;itertools.groupby&lt;/a&gt; que faz um agrupamento semelhante ao do comando &lt;code&gt;uniq&lt;/code&gt; do Unix, juntando elementos iguais consecutivos em um &lt;a href=&#34;https://docs.python.org/dev/howto/functional.html#iterators&#34;&gt;&lt;em&gt;iterator&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para quem quiser uma abordagem matemática da sequência, o &lt;a href=&#34;https://mathworld.wolfram.com/&#34;&gt;Wolfram Mathworld&lt;/a&gt; tem uma &lt;a href=&#34;https://mathworld.wolfram.com/LookandSaySequence.html&#34;&gt;página sobre ela&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
