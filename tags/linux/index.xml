<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on gmgall.net</title>
    <link>https://gmgall.net/tags/linux/</link>
    <description>Recent content in linux on gmgall.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Thu, 04 Aug 2011 00:00:00 -0300</lastBuildDate><atom:link href="https://gmgall.net/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Criando Suas Próprias Ações no fail2ban - Parte 3</title>
      <link>https://gmgall.net/blog/criando-suas-proprias-acoes-no-fail2ban-parte-3/</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/criando-suas-proprias-acoes-no-fail2ban-parte-3/</guid>
      <description>Estrutura de uma ação Cada ação é um arquivo no diretório action.d. Esses arquivos seguem a seguinte estrutura:
[Definition] # Option: actionstart # Notes.: comando executado ao iniciar o Fail2Ban. # Values: CMD # actionstart = # Option: actionstop # Notes.: comando executado ao encerrar o Fail2Ban # Values: CMD # actionstop = # Option: actioncheck # Notes.: comando executado antes de cada comando actionban # Values: CMD # actioncheck = # Option: actionban # Notes.</description>
    </item>
    
    <item>
      <title>Criando Seus Próprios Filtros no fail2ban - Parte 2</title>
      <link>https://gmgall.net/blog/criando-seus-proprios-filtros-no-fail2ban-parte-2/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/criando-seus-proprios-filtros-no-fail2ban-parte-2/</guid>
      <description>Se não existe um filtro pronto para o log que você deseja monitorar em filter.d, será necessário criar seu próprio filtro. Mostrarei como fazer isso através do exemplo que descrevo abaixo:
Cenário do exemplo Mantenho um wiki moinmoin e desejo bloquear o acesso à ele pelos hosts que tentarem login por mais de 3 vezes sem sucesso. Vamos fazer um filtro para fazer esse bloqueio. O log do wiki é escrito em /var/log/moinmoin.</description>
    </item>
    
    <item>
      <title>Introdução ao fail2ban - Parte 1</title>
      <link>https://gmgall.net/blog/introducao-ao-fail2ban-parte-1/</link>
      <pubDate>Fri, 29 Jul 2011 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/introducao-ao-fail2ban-parte-1/</guid>
      <description>O fail2ban é um software que monitora os logs do sistema e em caso de X (sendo X configurável) tentativas de autenticação sem sucesso em diversos serviços toma uma atitude, que pode ser colocar o host ofensor em /etc/hosts.deny, &amp;ldquo;dropar&amp;rdquo; seus pacotes via iptables ou qualquer outra ação definida pelo usuário.
Instalação do fail2ban Em máquinas Debian, a melhor maneira de instalar o fail2ban é via apt-get:
# apt-get update # apt-get install fail2ban As configurações default bloqueiam via iptables por 10 minutos os hosts que tentarem sem sucesso login via ssh 6 vezes.</description>
    </item>
    
    <item>
      <title>Daemon em Python</title>
      <link>https://gmgall.net/blog/daemon-em-python/</link>
      <pubDate>Sun, 24 May 2009 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/daemon-em-python/</guid>
      <description>Já usei mais de uma vez o código abaixo para criar pequenos daemons para Linux. Achei aqui e como ele foi liberado em domínio público, use como melhor convir.
#!/usr/bin/env python # -*- coding: utf-8 -*- import sys, os, time, atexit from signal import SIGTERM class Daemon: &amp;#34;&amp;#34;&amp;#34; A generic daemon class. Usage: subclass the Daemon class and override the run() method &amp;#34;&amp;#34;&amp;#34; def __init__(self, pidfile, stdin=&amp;#39;/dev/null&amp;#39;, stdout=&amp;#39;/dev/null&amp;#39;, stderr=&amp;#39;/dev/null&amp;#39;): self.stdin = stdin self.</description>
    </item>
    
  </channel>
</rss>
