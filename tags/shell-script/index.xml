<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell script on gmgall.net</title>
    <link>https://gmgall.net/tags/shell-script/</link>
    <description>Recent content in shell script on gmgall.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 28 Jan 2009 00:00:00 -0300</lastBuildDate><atom:link href="https://gmgall.net/tags/shell-script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Here Strings, Redirecionamentos e o builtin time</title>
      <link>https://gmgall.net/blog/here-strings-redirecionamentos-e-o-builtin-time/</link>
      <pubDate>Wed, 28 Jan 2009 00:00:00 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/here-strings-redirecionamentos-e-o-builtin-time/</guid>
      <description>&lt;p&gt;Estou fazendo um comparativo entre &lt;code&gt;gzip&lt;/code&gt; e &lt;code&gt;bzip2&lt;/code&gt; em seus diferentes modos de compressão (-1 a -9) e para automatizar o processo fiz um script bash que usa alguns recursos bastante interessantes, mas às vezes negligenciados, por isso vou falar sobre eles aqui.&lt;/p&gt;
&lt;p&gt;O script basicamente compacta um determinado arquivo com o &lt;code&gt;bzip2&lt;/code&gt; e o &lt;code&gt;gzip&lt;/code&gt;, cada um deles usando todos os modos de compressão, mede o tempo que o compactador ficou na CPU e escreve os resultados em um arquivo de saída. O comando para compactar o arquivo é montado dinamicamente usando dois loops aninhados. Um deles, o mais externo, itera sobre a lista de modos de compressão (-1 a -9) e o outro, o mais interno, itera sobre os compactadores. No final, a linha que realmente faz a compactação e mede o tempo gasto é&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TIMEC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;bc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; time eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CMDC&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Onde &lt;code&gt;TIMEC&lt;/code&gt; recebe o tempo de CPU gasto pelo comando de compactação e &lt;code&gt;$CMDC&lt;/code&gt; contém o comando de compactação. Um valor que essa variável pode assumir durante a execução é &lt;code&gt;gzip -c -2 arquivo&amp;gt;arquivo.gz&lt;/code&gt;, por exemplo.&lt;/p&gt;
&lt;p&gt;Feita essa introdução, o primeiro recurso interessante que eu gostaria de apresentar é o &lt;em&gt;here strings&lt;/em&gt;. O funcionamento dele é simples. Dado um comando como:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1+1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;a string &lt;code&gt;1+1&lt;/code&gt; será usada para alimentar a entrada padrão de &lt;code&gt;bc&lt;/code&gt;. Isso substitui a forma tradicional&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1+1&amp;#39;&lt;/span&gt; | bc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;que faz a mesma coisa, mas força um &lt;a href=&#34;https://en.wikipedia.org/wiki/Fork_(system_call)&#34;&gt;fork&lt;/a&gt; para isso, sendo mais ineficiente.&lt;/p&gt;
&lt;p&gt;Na linha do script que citei no início do post, o &lt;code&gt;bc&lt;/code&gt; vai receber o tempo gasto em modo usuário e o tempo gasto em modo kernel separados por um sinal de adição, fazendo portanto &lt;code&gt;TIMEC&lt;/code&gt; receber a soma desses valores. Aqui chegamos no segundo recurso que gostaria de citar nesse post. O builtin &lt;code&gt;time&lt;/code&gt; do bash (não confundir com o comando externo &lt;code&gt;time&lt;/code&gt;), pode ter sua saída formatada através do conteúdo da variável &lt;code&gt;TIMEFORMAT&lt;/code&gt;. Para fazer a saída do &lt;code&gt;time&lt;/code&gt; ficar no formato de uma soma, simplesmente atribuí o valor &lt;code&gt;%U+%S&lt;/code&gt; à &lt;code&gt;TIMEFORMAT&lt;/code&gt;. O &lt;code&gt;%U&lt;/code&gt; representa o tempo gasto em modo de usuário e o &lt;code&gt;%S&lt;/code&gt; o tempo gasto em modo kernel.&lt;/p&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ time df
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sist. Arq.           1K-blocos      Usad Dispon.   Uso% Montado em
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/dev/hdc3             &lt;span style=&#34;color:#ae81ff&#34;&gt;37491624&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32393072&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3194048&lt;/span&gt;  92% /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs                   &lt;span style=&#34;color:#ae81ff&#34;&gt;255180&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;255180&lt;/span&gt;   0% /dev/shm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real    0m0.061s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user    0m0.020s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys     0m0.016s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ TIMEFORMAT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%U+%S &lt;span style=&#34;color:#75715e&#34;&gt;# Formatando a saída de time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ time df
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sist. Arq.           1K-blocos      Usad Dispon.   Uso% Montado em
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/dev/hdc3             &lt;span style=&#34;color:#ae81ff&#34;&gt;37491624&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32393072&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3194048&lt;/span&gt;  92% /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs                   &lt;span style=&#34;color:#ae81ff&#34;&gt;255180&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;255180&lt;/span&gt;   0% /dev/shm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0.020+0.008
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Com isso, só fica faltando uma última coisa para mostrar: como redirecionar a saída do builtin &lt;code&gt;time&lt;/code&gt;. A primeira coisa importante a ter em mente, é que os tempos medidos em si são jogados na &lt;code&gt;stderr&lt;/code&gt;, enquanto que a &lt;code&gt;stdout&lt;/code&gt; é usada para a saída do comando cujo tempo de execução é medido. Dito isso uma primeira tentativa de redirecionar a saída do &lt;code&gt;time&lt;/code&gt; para um arquivo por exemplo, seria fazer simplesmente fazer algo como &lt;code&gt;time comando 2&amp;gt; arquivo&lt;/code&gt;, mas isso não funciona. O que é redirecionado para arquivo nesse caso é a saída de erros de comando, não a do time, que continua imprimindo na tela. Exemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ time ls naoexiste 2&amp;gt;saida_erros
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real    0m0.041s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user    0m0.036s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys     0m0.004s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat saida_erros
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls: impossível acessar naoexiste: Arquivo ou diretório não encontrado
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A saída para isso é executar o &lt;code&gt;time&lt;/code&gt; dentro de um bloco (em uma subshell também funciona, mas é ineficiente) e redirecionar a saída de erros desse bloco. Exemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; time ls naoexiste 2&amp;gt;/dev/null; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 2&amp;gt;saida_erros
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat saida_erros
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real    0m0.056s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user    0m0.028s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys     0m0.004s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perceba que dentro do bloco eu redirecionei a saída de erros de &lt;code&gt;ls naoexiste&lt;/code&gt; para &lt;code&gt;/dev/null&lt;/code&gt;, para que ela não se misturasse com a saída do &lt;code&gt;time&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Com isso já temos toda a teoria para entender a linha que citei no início do post. Vamos desmembrá-la e revisar o que apresentei nesse post.&lt;/p&gt;
&lt;h2 id=&#34;revisando&#34;&gt;Revisando&lt;/h2&gt;
&lt;p&gt;Na linha&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TIMEC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;bc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; time eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CMDC&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;TIMEC&lt;/code&gt; vai receber a soma, feita pela calculadora &lt;code&gt;bc&lt;/code&gt;, dos tempos calculados pelo builtin &lt;code&gt;time&lt;/code&gt; do bash. A saída desse comando foi formatada de acordo com a variável &lt;code&gt;TIMEFORMAT&lt;/code&gt; para formar uma string com uma soma do tempo gasto em modo kernel com o tempo gasto em modo de usuário (&lt;code&gt;%U+%S&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Dentro da subshell cujo resultado alimenta a entrada padrão do &lt;code&gt;bc&lt;/code&gt; o &lt;code&gt;time&lt;/code&gt; precisou ser executado dentro de um bloco, para ser possível capturar o seu resultado, que vai para &lt;code&gt;stderr&lt;/code&gt;. A &lt;code&gt;stdout&lt;/code&gt; é usada para a saída do comando cujo tempo de execução é medido pelo &lt;code&gt;time&lt;/code&gt;. A &lt;code&gt;stderr&lt;/code&gt; do bloco inteiro foi conectado a &lt;code&gt;stdout&lt;/code&gt;, sendo assim devidamente retornada pela subshell e usada para alimentar a entrada padrão da &lt;code&gt;bc&lt;/code&gt; via &lt;em&gt;here strings&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É isso. Quaisquer comentários são bem vindos.&lt;/p&gt;
&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mywiki.wooledge.org/BashFAQ/032&#34;&gt;BashFaq: How can I redirect the output of &amp;rsquo;time&amp;rsquo; to a variable or file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tldp.org/LDP/abs/html/io-redirection.html&#34;&gt;Advanced Bash-Scripting Guide: I/O Redirection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jneves.wordpress.com/2008/03/05/hello-world/&#34;&gt;Papo de Botequim: Tira Gosto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/bash&#34;&gt;Manpage do Bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
