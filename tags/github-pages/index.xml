<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github-pages on gmgall.net</title>
    <link>https://gmgall.net/tags/github-pages/</link>
    <description>Recent content in github-pages on gmgall.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 16 Apr 2023 14:01:34 -0300</lastBuildDate><atom:link href="https://gmgall.net/tags/github-pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gerando Feeds Com GitHub Actions e os Servindo Com GitHub Pages</title>
      <link>https://gmgall.net/blog/gerando-feeds-com-github-actions-e-os-servindo-com-github-pages/</link>
      <pubDate>Sun, 16 Apr 2023 14:01:34 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/gerando-feeds-com-github-actions-e-os-servindo-com-github-pages/</guid>
      <description>&lt;p&gt;Terminei o &lt;a href=&#34;https://gmgall.net/blog/criando-feeds-rss-com-newslinkrss/&#34;&gt;post anterior&lt;/a&gt; sobre o &lt;a href=&#34;https://github.com/ittner/newslinkrss&#34;&gt;newslinkrss&lt;/a&gt; falando o seguinte:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Com o comando que gera o &lt;em&gt;feed&lt;/em&gt; pronto, podemos remover a opção &lt;code&gt;--log&lt;/code&gt;. Para assinarmos o &lt;em&gt;feed&lt;/em&gt; criado podemos agendar a execução periódica do &lt;code&gt;newslinkrss&lt;/code&gt; via &lt;code&gt;cron&lt;/code&gt; e assinarmos o &lt;em&gt;feed&lt;/em&gt; resultante ou então indicarmos no nosso agregador RSS que a origem é um comando.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Isso cobre 2 de 3 possibilidades de consumo dos &lt;em&gt;feeds&lt;/em&gt; criados. São elas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arquivo local;&lt;/li&gt;
&lt;li&gt;comando e&lt;/li&gt;
&lt;li&gt;URL.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A 1ª possibilidade, a de agendar o &lt;code&gt;newslinkrss&lt;/code&gt; para escrever periodicamente um &lt;em&gt;feed&lt;/em&gt; em &lt;code&gt;/path/para/o/feed.xml&lt;/code&gt; e depois informar ao agregador que a origem do &lt;em&gt;feed&lt;/em&gt; é um arquivo, não é viável caso o nosso agregador RSS seja um serviço &lt;em&gt;web&lt;/em&gt; como o &lt;a href=&#34;https://feedly.com/&#34;&gt;Feedly&lt;/a&gt;. Ele naturalmente não tem acesso ao nosso sistema de arquivos local.&lt;/p&gt;
&lt;p&gt;A 2ª possibilidade, a de informar que a origem do &lt;em&gt;feed&lt;/em&gt; é um comando, é interessante por não nos obrigar a agendar a execução periódica do &lt;code&gt;newslinkrss&lt;/code&gt;, mas não são todos os agregadores que possuem essa funcionalidade.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;liferea.png&#34;
         alt=&#34;Tela de cadastro do agregador RSS Liferea mostrando 3 fontes possíveis para o feed: URL, comando e arquivo local.&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Tela de cadastro de feed no agregador Liferea. Não são todos que permitem usar um comando como fonte.&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Resta a última possibilidade: gerar os &lt;em&gt;feeds&lt;/em&gt;, servi-los na &lt;em&gt;web&lt;/em&gt; e informar no agregador que a origem é a URL dos &lt;em&gt;feeds&lt;/em&gt; gerados. Isso vai funcionar em agregadores &lt;em&gt;web&lt;/em&gt;, &lt;em&gt;mobile&lt;/em&gt; ou &lt;em&gt;desktop&lt;/em&gt; e vai permitir que outras pessoas também cadastrem o &lt;em&gt;feed&lt;/em&gt; que você criou. É a possibilidade mais versátil porque estaremos fazendo o trabalho que o dono do site &lt;strong&gt;deveria ter feito, mas não fez&lt;/strong&gt;: servir um &lt;em&gt;feed&lt;/em&gt; para o site acessível a qualquer um na &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A desvantagem dessa abordagem é que nem todo mundo vai ter um servidor &lt;em&gt;web&lt;/em&gt; acessível na internet e configurar um só para servir &lt;em&gt;feeds&lt;/em&gt; de sites de terceiros pode ser trabalho demais. Seria ótimo uma alternativa mais simples e sugiro uma que depende apenas de termos uma conta no &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;: gerar os &lt;em&gt;feeds&lt;/em&gt; com &lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;GitHub Actions&lt;/a&gt; e servi-los via &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &amp;ldquo;estalo&amp;rdquo; veio ao pensar no &lt;a href=&#34;https://github.com/gmgall/gmgall.net/blob/main/.github/workflows/gh-pages-deployment.yml&#34;&gt;&lt;em&gt;workflow&lt;/em&gt; que uso para publicar meu site&lt;/a&gt;. Se tenho um &lt;em&gt;workflow&lt;/em&gt; que executa o &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; e faz o &lt;em&gt;deploy&lt;/em&gt; dos arquivos HTML/CSS/JS/etc. gerados por ele no GitHub Pages, seria questão de pouca adaptação ter um &lt;em&gt;workflow&lt;/em&gt; que executa o &lt;code&gt;newslinkrss&lt;/code&gt; e faz o &lt;em&gt;deploy&lt;/em&gt; dos arquivos XML gerados.&lt;/p&gt;
&lt;p&gt;Funcionou praticamente na 1ª tentativa. O &lt;a href=&#34;https://github.com/gmgall/feeds&#34;&gt;repositório&lt;/a&gt; com o &lt;a href=&#34;https://github.com/gmgall/feeds/blob/main/generate_feeds.sh&#34;&gt;script que gera os &lt;em&gt;feeds&lt;/em&gt;&lt;/a&gt; e o &lt;a href=&#34;https://github.com/gmgall/feeds/blob/main/.github/workflows/feeds.yml&#34;&gt;&lt;em&gt;workflow&lt;/em&gt; que executa o script e faz o &lt;em&gt;deploy&lt;/em&gt;&lt;/a&gt; dos arquivos é público. O script &lt;code&gt;generate_feeds.sh&lt;/code&gt; é só um script Bash com uma sucessão de chamadas ao &lt;code&gt;newslinkrss&lt;/code&gt;. Os arquivos gerados em são escritos em &lt;code&gt;./feeds&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O arquivo &lt;code&gt;.github/workflows/feeds.yml&lt;/code&gt; descreve um &lt;em&gt;workflow&lt;/em&gt; do GitHub Actions que prepara o ambiente, executa o script &lt;code&gt;generate_feeds.sh&lt;/code&gt; e faz o &lt;em&gt;deploy&lt;/em&gt; dos arquivos em &lt;code&gt;./feeds&lt;/code&gt; no GitHub Pages. Vou descrever o que cada trecho do arquivo faz sem muito detalhamento porque acho que é praticamente autoexplicativo. Vou me deter no processo de configuração do Pages e das chaves no final, por ser as maiores &amp;ldquo;pegadinhas&amp;rdquo; do processo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Generate and deploy feeds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# Run workflow automatically&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;cron&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0 * * * *&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Runs every hour, on the hour&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O trecho acima nomeia o &lt;em&gt;workflow&lt;/em&gt; e define que ele será executado em 2 situações:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Periodicamente, a cada 1h. A sintaxe usada é a do &lt;code&gt;cron&lt;/code&gt;. Se precisar de ajuda com ela, veja o assistente &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab guru&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ao se clicar no botão &lt;strong&gt;Run workflow&lt;/strong&gt; na página das &lt;em&gt;Actions&lt;/em&gt; do repositório no GitHub. Não é estritamente necessário, mas é interessante enquanto você estiver testando. Imagine precisar esperar uma hora pela próxima execução do &lt;em&gt;workflow&lt;/em&gt; só para descobrir se alguma alteração funcionou como previsto?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;build-deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aqui é definido que a máquina virtual (o &lt;em&gt;runner&lt;/em&gt;) em que os passos seguintes serão executados usará a última versão disponível do Ubuntu Linux.&lt;/p&gt;
&lt;p&gt;Também executa o primeiro passo: fazer &lt;em&gt;checkout&lt;/em&gt; do repositório. O &lt;em&gt;runner&lt;/em&gt; vai precisar usar o script &lt;code&gt;generate_feeds.sh&lt;/code&gt;. Essa &lt;em&gt;action&lt;/em&gt; torna o script disponível no &lt;em&gt;runner&lt;/em&gt;. É como se estivéssemos fazendo &lt;code&gt;git clone&lt;/code&gt; no &lt;em&gt;runner&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Instala Python 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/setup-python@v2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;python-version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3.9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Instala newslinkrss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pip3 install newslinkrss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Acima instalamos o Python e o &lt;code&gt;newslinkrss&lt;/code&gt; via &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Cria diretório que receberá os feeds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mkdir feeds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Acima criamos o diretório &lt;code&gt;feeds&lt;/code&gt;. Lembram que &lt;code&gt;generate_feeds.sh&lt;/code&gt; escreve sempre no diretório &lt;code&gt;feeds&lt;/code&gt;? Com esse passo, criamos esse diretório no &lt;em&gt;runner&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Executa newslinkrss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bash generate_feeds.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Acima executamos o script &lt;code&gt;generate_feeds.sh&lt;/code&gt;. O script está disponível no &lt;em&gt;runner&lt;/em&gt; porque o 1º passo que fizemos foi um &lt;em&gt;checkout&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ACTIONS_DEPLOY_KEY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gh-pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_DIR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./feeds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Acima é feito o &lt;em&gt;deploy&lt;/em&gt; com a &lt;em&gt;action&lt;/em&gt; &lt;a href=&#34;https://github.com/peaceiris/actions-gh-pages&#34;&gt;&lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt;&lt;/a&gt;. Essa é a parte final do &lt;em&gt;workflow&lt;/em&gt; e a que eu acho que merece um pouco mais de atenção &lt;strong&gt;porque demanda configurações em outros locais&lt;/strong&gt;. Vou falar de cada variável abaixo de &lt;code&gt;env:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PUBLISH_DIR&lt;/code&gt; define o diretório cujo conteúdo será servido via GitHub Pages. Os &lt;em&gt;feeds&lt;/em&gt; são escritos em &lt;code&gt;./feeds&lt;/code&gt; no &lt;em&gt;runner&lt;/em&gt; pelo script &lt;code&gt;generate_feeds.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PUBLISH_BRANCH&lt;/code&gt; define o nome do &lt;em&gt;branch&lt;/em&gt; no nosso repositório que terá os arquivos servidos via GitHub Pages. Ele será um branch órfão do repositório. Não terá o script &lt;code&gt;generate_feeds.sh&lt;/code&gt;, o &lt;code&gt;README.md&lt;/code&gt;, o arquivo YAML que descreve o &lt;em&gt;workflow&lt;/em&gt; ou qualquer outra coisa que não sejam os arquivos servidos via GitHub Pages. Aqui estamos definindo o &lt;em&gt;branch&lt;/em&gt; &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Certifique-se de que as configurações do seu repositório em &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Pages&lt;/em&gt; estejam como na imagem abaixo: definindo que a origem é um &lt;em&gt;branch&lt;/em&gt; de nome &lt;code&gt;gh-pages&lt;/code&gt;. No momento em que escrevo esse post, a URL para acessar essa configuração é &lt;a href=&#34;https://github.com/USER/REPO/settings/pages&#34;&gt;https://github.com/USER/REPO/settings/pages&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;pages_config.png&#34;
         alt=&#34;Configurações do GitHub Pages para um repositório no GitHub. As configurações mostram que o branch de origem é gh-pages.&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Configurações do GitHub Pages.&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;ACTIONS_DEPLOY_KEY&lt;/code&gt; define um &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;&lt;em&gt;segredo criptografado&lt;/em&gt;&lt;/a&gt; de mesmo nome com a &lt;strong&gt;parte privada&lt;/strong&gt; de um par de chaves que será usada para o &lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys&#34;&gt;&lt;em&gt;deploy&lt;/em&gt;&lt;/a&gt;. Os segredos são configurados em &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Secrets and variables&lt;/em&gt;. No momento em que escrevo esse post, a URL é &lt;a href=&#34;https://github.com/USER/REPO/settings/secrets/actions&#34;&gt;https://github.com/USER/REPO/settings/secrets/actions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;parte pública&lt;/strong&gt; deve ser configurada em &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deploy keys&lt;/em&gt;. No momento em que escrevo esse post, a URL para essa configuração é &lt;a href=&#34;https://github.com/USER/REPO/settings/keys&#34;&gt;https://github.com/USER/REPO/settings/keys&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A lógica é análoga a configurar login numa máquina remota via SSH com um par de chaves. A sua máquina local fica com a parte privada. A máquina remota fica com a parte pública.&lt;/p&gt;
&lt;p&gt;O repositório tem uma chave pública configurada para que apenas &lt;strong&gt;as máquinas com a parte privada correspondente&lt;/strong&gt; possam fazer &lt;em&gt;deploy&lt;/em&gt; nele. Essa parte privada é usada pelos &lt;em&gt;runners&lt;/em&gt; do GitHub Actions. Eles nada mais são que máquinas virtuais efêmeras, então não podemos logar nelas uma única vez e configurar a chave privada como faríamos em uma máquina qualquer que controlamos. A parte privada fica acessível aos &lt;em&gt;runners&lt;/em&gt; por meio dos &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;segredos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como configuramos ambas as partes nas configurações de um mesmo repositório, pode ficar confuso o papel de cada parte. Espero as linhas acima tenham ajudado a elucidar o papel de cada uma. Mostro como fazer na prática abaixo.&lt;/p&gt;
&lt;h2 id=&#34;configurando-as-chaves&#34;&gt;Configurando as chaves&lt;/h2&gt;
&lt;h3 id=&#34;criando-as-chaves&#34;&gt;Criando as chaves&lt;/h3&gt;
&lt;p&gt;A criação do par de chaves pode ser feita com um comando como o seguinte:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t rsa -b &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git config user.email&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -f gh-pages -N &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2 arquivos serão criados por esse comando: &lt;code&gt;gh-pages&lt;/code&gt; e &lt;code&gt;gh-pages.pub&lt;/code&gt;, as chaves privada e pública, respectivamente.&lt;/p&gt;
&lt;h3 id=&#34;adicionando-a-chave-pública-como-deploy-key&#34;&gt;Adicionando a chave pública como &lt;em&gt;deploy key&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Acesse &lt;a href=&#34;https://github.com/USER/REPO/settings/keys&#34;&gt;https://github.com/USER/REPO/settings/keys&lt;/a&gt;, clique em &lt;em&gt;Add deploy key&lt;/em&gt; e cole a &lt;strong&gt;parte pública&lt;/strong&gt;. Lembre-se de marcar a caixa &lt;em&gt;Allow write access&lt;/em&gt; e clique em &lt;em&gt;Add key&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As configurações em &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deploy keys&lt;/em&gt; devem ficar parecidas às da figura abaixo.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;deploy_keys.png&#34;
         alt=&#34;Configurações das deploy keys num repositório do GitHub após a configuração de uma chave.&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Configurações das deploy keys.&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;adicionando-a-chave-privada-como-segredo&#34;&gt;Adicionando a chave privada como segredo&lt;/h3&gt;
&lt;p&gt;Acesse &lt;a href=&#34;https://github.com/USER/REPO/settings/secrets/actions&#34;&gt;https://github.com/USER/REPO/settings/secrets/actions&lt;/a&gt;, clique no botão verde &lt;em&gt;New repository secret&lt;/em&gt;, use &lt;code&gt;ACTIONS_DEPLOY_KEY&lt;/code&gt; como nome, cole a &lt;strong&gt;parte privada&lt;/strong&gt; no campo &lt;em&gt;Secret&lt;/em&gt; e clique em &lt;em&gt;Add secret&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As configurações em &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Secrets and variables&lt;/em&gt; &amp;gt; &lt;em&gt;Actions&lt;/em&gt; devem ficar parecidas às da figura abaixo.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;secrets.png&#34;
         alt=&#34;Configurações dos segredos criptografados num repositório do GitHub após a inserção de um segredo chamado &amp;#34;ACTIONS_DEPLOY_KEY&amp;#34;.&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Configurações dos segredos num repositório após a inserção de um segredo chamado ACTIONS_DEPLOY_KEY.&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Com o &lt;em&gt;workflow&lt;/em&gt; funcionando, os &lt;em&gt;feeds&lt;/em&gt; estarão disponíveis numa URL como &lt;a href=&#34;https://USER.github.io/REPO/FILE.xml&#34;&gt;https://USER.github.io/REPO/FILE.xml&lt;/a&gt;. No caso do &lt;em&gt;feed&lt;/em&gt; de exemplo que fiz para o &lt;a href=&#34;https://gmgall.net/blog/criando-feeds-rss-com-newslinkrss/&#34;&gt;post anterior&lt;/a&gt;, a URL é &lt;a href=&#34;https://gmgall.github.io/feeds/gmgall_untappd.xml&#34;&gt;https://gmgall.github.io/feeds/gmgall_untappd.xml&lt;/a&gt; (&lt;code&gt;feeds&lt;/code&gt; é o &lt;a href=&#34;https://github.com/gmgall/feeds&#34;&gt;nome do repositório&lt;/a&gt; e &lt;code&gt;gmgall_untappd.xml&lt;/code&gt; é o &lt;a href=&#34;https://github.com/gmgall/feeds/blob/464ddf704a3ee2d46bbc40220331b0bb27d4e767/generate_feeds.sh#L20&#34;&gt;nome do arquivo gerado pelo script&lt;/a&gt; &lt;code&gt;generate_feeds.sh&lt;/code&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Usa o GitHub Actions para algo parecido? Pensou em outra forma de servir os &lt;em&gt;feeds&lt;/em&gt;? Seria ótimo conversar sobre isso. Entre com &lt;a href=&#34;https://gmgall.net/contact/&#34;&gt;contato&lt;/a&gt; se quiser trocar ideia.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://gmgall.net/blog/hello-world/</link>
      <pubDate>Thu, 12 Jan 2023 13:45:38 -0300</pubDate>
      
      <guid>https://gmgall.net/blog/hello-world/</guid>
      <description>&lt;p&gt;Eu já tentei manter um site pessoal na internet N vezes. Nunca foi &amp;ldquo;pra frente&amp;rdquo;. Essa é a tentativa N + 1.&lt;/p&gt;
&lt;p&gt;Não preciso ser convencido da importância da escrita, sei dos benefícios que posso tirar dela. Escrever nos ajuda a entender as coisas, robustece nosso pensamento. Existem coisas que parecem bem estruturadas na nossa cabeça até que tentemos escrever ou conversar com alguém sobre. Escrever é &lt;a href=&#34;https://en.wikipedia.org/wiki/Debugging&#34;&gt;&lt;em&gt;debugar&lt;/em&gt;&lt;/a&gt; a si mesmo.&lt;/p&gt;
&lt;p&gt;Depois que entendi isso, abandonei qualquer pretensão de originalidade, que, aliás, é &lt;a href=&#34;https://guzey.com/personal/why-have-a-blog/#but-i-dont-have-anything-original-to-say-and-i-would-be-just-repeating-things-said-elsewhere-on-the-internet&#34;&gt;superestimada&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ainda assim, a procrastinação seguia. Eu implicava com 2 coisas principalmente: a organização do conteúdo e a &lt;em&gt;stack&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;organização-do-conteúdo&#34;&gt;Organização do conteúdo&lt;/h2&gt;
&lt;p&gt;Ter um blog em que escrevesse tudo que eu quisesse, usando apenas tags para organizar o conteúdo, não me parecia ideal. E se alguém de TI entrasse no site buscando conteúdo técnico e tivesse que navegar por um monte de textos opinativos? E se alguma amiga de fora da área de tecnologia entrasse no site e visse um monte de textos sobre desenvolvimento de software?&lt;/p&gt;
&lt;p&gt;Quero poder escrever sobre tudo que me interessa, mas também não quero alienar uma potencial audiência apresentando tudo &amp;ldquo;junto e misturado&amp;rdquo;, numa forma difícil de navegar.&lt;/p&gt;
&lt;p&gt;Considerei sites separados para cada tipo de conteúdo, mas o trabalho extra necessário para manter mais de um site me demoveu dessa ideia. Fora que suscita a pergunta: qual critério eu deveria usar para colocar determinado conteúdo num site e não no outro? Os sites pessoais mais &lt;a href=&#34;https://aurelio.net/&#34;&gt;interessantes&lt;/a&gt; &lt;a href=&#34;https://epxx.co/&#34;&gt;que&lt;/a&gt; &lt;a href=&#34;https://thobias.org/&#34;&gt;conheço&lt;/a&gt; tratam de &lt;a href=&#34;https://epxx.co/artigos/index_pens.html&#34;&gt;tudo&lt;/a&gt; &lt;a href=&#34;https://aurelio.net/fvm/&#34;&gt;que &amp;ldquo;dá na telha&amp;rdquo;&lt;/a&gt; dos donos. O meu seria assim também.&lt;/p&gt;
&lt;p&gt;Foi remoendo as questões acima que decidi usar a organização com 2 &lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34;&gt;taxonomias&lt;/a&gt; (&lt;strong&gt;categorias e tags&lt;/strong&gt;), que já é usada em muitos blogs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma &lt;a href=&#34;https://gmgall.net/categories&#34;&gt;categoria&lt;/a&gt; é uma classificação mais ampla e dificilmente um post vai estar em mais de uma categoria. Para começar, terei 2 categorias: uma para posts &lt;a href=&#34;https://gmgall.net/categories/tech&#34;&gt;técnicos&lt;/a&gt; e outra para posts &lt;a href=&#34;https://gmgall.net/categories/non-tech&#34;&gt;não técnicos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Uma &lt;a href=&#34;https://gmgall.net/tags&#34;&gt;tag&lt;/a&gt; é uma classificação mais estrita e frequentemente um post terá mais de uma tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Além disso, existem as seções de conteúdo separadas. Nelas cada página pode receber categorias e tags também, mas elas são apresentadas de forma diferente dos textos. A única seção separada hoje é a de &lt;a href=&#34;https://gmgall.net/books&#34;&gt;leituras&lt;/a&gt;. Pretendo que cada página sobre um livro mostre ao menos uma imagem da capa e informações do livro em destaque.&lt;/p&gt;
&lt;p&gt;Cada categoria, tag e seção separada terá seu próprio &lt;em&gt;feed&lt;/em&gt; RSS. Um potencial leitor pode assinar o &lt;em&gt;feed&lt;/em&gt; específico e acompanhar apenas o conteúdo de seu interesse.&lt;/p&gt;
&lt;h2 id=&#34;stack&#34;&gt;Stack&lt;/h2&gt;
&lt;p&gt;Depois de algumas tentativas de usar &lt;a href=&#34;https://en.wikipedia.org/wiki/Content_management_system&#34;&gt;CMS&lt;/a&gt;s, ficou claro que eu não queria ter o trabalho de instalar e manter atualizados os softwares de uma pilha &lt;a href=&#34;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&#34;&gt;LAMP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Static_site_generator&#34;&gt;Geradores de sites estáticos&lt;/a&gt; seriam meu caminho. Li sobre as opções disponíveis e fiquei convencido de que o melhor &amp;ldquo;no mercado&amp;rdquo; é o &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. Decidi usá-lo. Gostei do que vi nos primeiros usos, mas demorei um pouco até encontrar um &lt;a href=&#34;https://www.pragprog.com/titles/bhhugo/build-websites-with-hugo/&#34;&gt;livro que me ensinou decentemente&lt;/a&gt; sobre ele.&lt;/p&gt;
&lt;p&gt;Para hospedagem, estou usando &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para fazer o &lt;em&gt;build&lt;/em&gt; e o &lt;em&gt;deploy&lt;/em&gt;, estou usando &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;. Existem &lt;em&gt;actions&lt;/em&gt; prontas para &lt;a href=&#34;https://github.com/marketplace/actions/hugo-setup&#34;&gt;instalar o Hugo&lt;/a&gt; e &lt;a href=&#34;https://github.com/marketplace/actions/github-pages-action&#34;&gt;fazer o &lt;em&gt;deploy&lt;/em&gt; no GitHub Actions&lt;/a&gt;, então o &lt;a href=&#34;https://github.com/gmgall/gmgall.net/blob/main/.github/workflows/gh-pages-deployment.yml&#34;&gt;&lt;em&gt;workflow&lt;/em&gt;&lt;/a&gt; fica relativamente simples.&lt;/p&gt;
&lt;p&gt;O primeiro lugar em que li sobre esse tipo de &lt;em&gt;workflow&lt;/em&gt; foi em &lt;a href=&#34;https://www.morling.dev&#34;&gt;morling.dev&lt;/a&gt;, no post &lt;a href=&#34;https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/&#34;&gt;&lt;em&gt;Automatically Deploying a Hugo Website via GitHub Actions&lt;/em&gt;&lt;/a&gt;. Seguindo esse caminho, você fica com um repositório único que contém o código fonte do site (em um &lt;em&gt;branch&lt;/em&gt; principal) e os arquivos que efetivamente são servidos (em um &lt;em&gt;branch&lt;/em&gt; &lt;a href=&#34;https://dev.to/mcaci/how-to-create-an-orphan-branch-in-git-35ac&#34;&gt;órfão&lt;/a&gt; &lt;code&gt;gp-pages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Outro padrão que vi sendo bastante usado é ter 2 repositórios: um só para o código fonte e outro só para os arquivos que serão servidos pelo GitHub Pages. Veja um exemplo em &lt;a href=&#34;https://ruddra.com/hugo-deploy-static-page-using-github-actions/&#34;&gt;&lt;em&gt;Hugo: Deploy Static Site using GitHub Actions&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Pensar nisso tudo acima antes mesmo de ter o que postar é complicar demais o que é simples, você deve estar pensando. O ideal seria simplesmente começar e ir ajustando o que fosse necessário pelo caminho.&lt;/p&gt;
&lt;p&gt;E você estaria certa. Procrastinei manter um site na web por muito mais tempo do que me orgulho. Estou com o domínio gmgall.net &amp;ldquo;parado&amp;rdquo; há vários anos.&lt;/p&gt;
&lt;p&gt;Protelei tanto por uma ansiedade de me expor que só consegui lidar melhor com &lt;a href=&#34;https://pt.wikipedia.org/wiki/Psicoterapia&#34;&gt;ajuda&lt;/a&gt;. Então deseje-me sorte e seja bem vinda, pessoa leitora! 😁&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
